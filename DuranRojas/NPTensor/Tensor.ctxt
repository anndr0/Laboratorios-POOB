#BlueJ class context
comment0.target=Tensor
comment1.params=shape\ value
comment1.target=Tensor(int[],\ int)
comment1.text=\r\n\ Crea\ un\ nuevo\ tensor\ con\ la\ misma\ forma\ pero\ todos\ los\ elementos\ con\ el\ mismo\ valor.\r\n\r\n\ @param\ shape\ \ La\ forma\ del\ nuevo\ tensor.\r\n\ @param\ value\ \ El\ valor\ con\ el\ que\ se\ llenar\u00E1\ el\ tensor.\r\n
comment10.params=shape
comment10.target=int\ calculateSize(int[])
comment10.text=\r\n\ Calcula\ el\ tama\u00F1o\ total\ de\ un\ tensor\ en\ funci\u00F3n\ de\ las\ dimensiones\ proporcionadas.\r\n\r\n\ @param\ shape\ Un\ arreglo\ de\ enteros\ que\ representa\ las\ dimensiones\ del\ tensor.\r\n\ @return\ El\ tama\u00F1o\ total\ del\ tensor,\ que\ es\ el\ producto\ de\ todas\ las\ dimensiones.\r\n
comment11.params=index
comment11.target=int\ calculateFlatIndex(int[])
comment11.text=\r\n\ Calcula\ el\ \u00EDndice\ plano\ (flat\ index)\ correspondiente\ a\ un\ \u00EDndice\ multidimensional\ en\ el\ tensor.\r\n\r\n\ @param\ index\ Un\ arreglo\ de\ enteros\ que\ representa\ el\ \u00EDndice\ multidimensional.\r\n\ @return\ El\ \u00EDndice\ plano\ que\ corresponde\ a\ la\ posici\u00F3n\ en\ el\ arreglo\ unidimensional\ de\ valores\ del\ tensor.\r\n\ @throws\ IllegalArgumentException\ Si\ la\ longitud\ del\ \u00EDndice\ no\ coincide\ con\ la\ cantidad\ de\ dimensiones\ del\ tensor.\r\n
comment12.params=
comment12.target=int[]\ getShape()
comment12.text=\r\n\ Obtiene\ la\ forma\ del\ tensor.\r\n\r\n\ @return\ Un\ arreglo\ de\ enteros\ que\ representa\ la\ forma\ del\ tensor.\r\n
comment13.params=
comment13.target=int[]\ getValues()
comment13.text=\r\n\ Obtiene\ una\ copia\ de\ los\ valores\ del\ tensor.\r\n\r\n\ @return\ Un\ arreglo\ de\ enteros\ que\ contiene\ los\ valores\ del\ tensor.\r\n
comment14.params=
comment14.target=Tensor\ shuffle()
comment14.text=\r\n\ Realiza\ una\ operaci\u00F3n\ de\ barajado\ aleatorio\ en\ el\ tensor.\r\n\r\n\ @return\ Un\ nuevo\ tensor\ con\ los\ mismos\ valores\ pero\ en\ orden\ aleatorio.\r\n
comment15.params=
comment15.target=int[]\ getData()
comment15.text=\r\n\ Obtiene\ los\ datos\ del\ tensor\ en\ forma\ de\ un\ arreglo\ unidimensional\ de\ enteros.\r\n\r\n\ @return\ Un\ arreglo\ unidimensional\ que\ contiene\ los\ valores\ almacenados\ en\ el\ tensor.\r\n
comment16.params=list\ start\ end\ step
comment16.target=int[]\ slice(int[],\ int,\ int,\ int)
comment16.text=\r\n\ Obtiene\ una\ secci\u00F3n\ espec\u00EDfica\ de\ un\ arreglo\ de\ enteros.\r\n\r\n\ @param\ list\ \ \ El\ arreglo\ de\ enteros\ original.\r\n\ @param\ start\ \ El\ \u00EDndice\ de\ inicio\ de\ la\ secci\u00F3n.\r\n\ @param\ end\ \ \ \ El\ \u00EDndice\ de\ fin\ de\ la\ secci\u00F3n.\r\n\ @param\ step\ \ \ El\ incremento\ entre\ elementos\ de\ la\ secci\u00F3n.\r\n\ @return\ Un\ nuevo\ arreglo\ de\ enteros\ que\ representa\ la\ secci\u00F3n\ especificada.\r\n
comment17.params=indices\ flatIndex
comment17.target=void\ calculateIndices(int[],\ int)
comment17.text=\r\n\ Calcula\ los\ \u00EDndices\ multidimensionales\ a\ partir\ de\ un\ \u00EDndice\ plano\ (flat\ index).\r\n\r\n\ @param\ indices\ \ \ \ Un\ arreglo\ que\ se\ llenar\u00E1\ con\ los\ \u00EDndices\ multidimensionales\ calculados.\r\n\ @param\ flatIndex\ \ El\ \u00EDndice\ plano\ que\ se\ convertir\u00E1\ en\ \u00EDndices\ multidimensionales.\r\n
comment18.params=value
comment18.target=int\ find(int)
comment18.text=\r\n\ Busca\ un\ valor\ en\ el\ tensor\ y\ devuelve\ su\ \u00EDndice.\r\n\r\n\ @param\ value\ \ El\ valor\ que\ se\ busca\ en\ el\ tensor.\r\n\ @return\ El\ \u00EDndice\ del\ valor\ encontrado\ o\ -1\ si\ no\ se\ encuentra.\r\n
comment19.params=other
comment19.target=Tensor\ subtract(Tensor)
comment19.text=\r\n\ Realiza\ una\ operaci\u00F3n\ de\ resta\ con\ otro\ tensor\ del\ mismo\ tama\u00F1o.\r\n\r\n\ @param\ other\ \ El\ tensor\ a\ restar.\r\n\ @return\ Un\ nuevo\ tensor\ con\ el\ resultado\ de\ la\ resta.\r\n\ @throws\ IllegalArgumentException\ Si\ los\ tensores\ no\ tienen\ la\ misma\ forma.\r\n
comment2.params=shape\ values
comment2.target=Tensor(int[],\ int[])
comment2.text=\r\n\ Crea\ un\ nuevo\ tensor\ con\ una\ forma\ dada\ y\ valores\ proporcionados.\r\n\r\n\ @param\ shape\ \ \ La\ forma\ del\ nuevo\ tensor.\r\n\ @param\ values\ \ Los\ valores\ que\ se\ asignar\u00E1n\ al\ tensor.\r\n
comment20.params=other
comment20.target=Tensor\ multiply(Tensor)
comment20.text=\r\n\ Realiza\ una\ operaci\u00F3n\ de\ multiplicaci\u00F3n\ con\ otro\ tensor\ del\ mismo\ tama\u00F1o.\r\n\r\n\ @param\ other\ \ El\ tensor\ a\ multiplicar.\r\n\ @return\ Un\ nuevo\ tensor\ con\ el\ resultado\ de\ la\ multiplicaci\u00F3n.\r\n\ @throws\ IllegalArgumentException\ Si\ los\ tensores\ no\ tienen\ la\ misma\ forma.\r\n
comment21.params=
comment21.target=int\ calculateNorm()
comment21.text=\r\n\ Calcula\ la\ norma\ (m\u00F3dulo)\ del\ tensor\ como\ la\ ra\u00EDz\ cuadrada\ de\ la\ suma\ de\ los\ cuadrados\ de\ sus\ elementos.\r\n\r\n\ @return\ La\ norma\ del\ tensor\ como\ un\ n\u00FAmero\ entero.\r\n
comment22.params=
comment22.target=int\ calculateTrace()
comment22.text=\r\n\ Calcula\ la\ traza\ de\ una\ matriz\ cuadrada,\ que\ es\ la\ suma\ de\ los\ elementos\ en\ la\ diagonal\ principal.\r\n\r\n\ @return\ La\ traza\ de\ la\ matriz\ cuadrada\ como\ un\ n\u00FAmero\ entero.\r\n
comment3.params=index
comment3.target=int\ value(int[])
comment3.text=\r\n\ Obtiene\ el\ valor\ en\ la\ posici\u00F3n\ especificada\ del\ tensor\ multidimensional.\r\n\r\n\ @param\ index\ \ El\ \u00EDndice\ de\ la\ posici\u00F3n\ deseada.\r\n\ @return\ El\ valor\ en\ la\ posici\u00F3n\ indicada.\r\n
comment4.params=newShape
comment4.target=Tensor\ reshape(int[])
comment4.text=\r\n\ Cambia\ la\ forma\ del\ tensor\ sin\ cambiar\ sus\ valores.\r\n\r\n\ @param\ newShape\ \ La\ nueva\ forma\ deseada.\r\n\ @return\ Un\ nuevo\ tensor\ con\ la\ forma\ especificada.\r\n\ @throws\ IllegalArgumentException\ Si\ la\ nueva\ forma\ no\ tiene\ el\ mismo\ n\u00FAmero\ de\ elementos.\r\n
comment5.params=t
comment5.target=Tensor\ add(Tensor)
comment5.text=\r\n\ Realiza\ una\ operaci\u00F3n\ de\ suma\ con\ otro\ tensor\ del\ mismo\ tama\u00F1o.\r\n\r\n\ @param\ t\ \ El\ tensor\ a\ sumar.\r\n\ @return\ Un\ nuevo\ tensor\ con\ el\ resultado\ de\ la\ suma.\r\n\ @throws\ IllegalArgumentException\ Si\ los\ tensores\ no\ tienen\ la\ misma\ forma.\r\n
comment6.params=other
comment6.target=boolean\ equals(Tensor)
comment6.text=\r\n\ Compara\ este\ tensor\ con\ otro\ para\ verificar\ si\ son\ iguales.\r\n\r\n\ @param\ other\ \ El\ tensor\ con\ el\ que\ se\ compara.\r\n\ @return\ true\ si\ los\ tensores\ son\ iguales,\ false\ en\ caso\ contrario.\r\n
comment7.params=other
comment7.target=boolean\ equals(java.lang.Object)
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\r\n\ Convierte\ el\ tensor\ en\ una\ cadena\ de\ texto.\r\n\r\n\ @return\ Una\ representaci\u00F3n\ en\ cadena\ del\ tensor.\r\n
comment9.params=tensor\ level\ indices
comment9.target=java.lang.String\ buildString(Tensor,\ int,\ int[])
comment9.text=\r\n\ Construye\ una\ representaci\u00F3n\ en\ forma\ de\ cadena\ (string)\ del\ tensor\ y\ sus\ valores\ de\ manera\ recursiva.\r\n\r\n\ @param\ tensor\ \ El\ tensor\ actual\ que\ se\ est\u00E1\ construyendo.\r\n\ @param\ level\ \ \ El\ nivel\ actual\ de\ profundidad\ en\ la\ construcci\u00F3n\ recursiva.\r\n\ @param\ indices\ Un\ arreglo\ de\ \u00EDndices\ que\ se\ utiliza\ para\ rastrear\ la\ posici\u00F3n\ actual\ en\ el\ tensor.\r\n\ @return\ Una\ representaci\u00F3n\ en\ forma\ de\ cadena\ del\ tensor\ y\ sus\ valores.\r\n
numComments=23
